name: Code Quality Checks

on:
  workflow_call:
    inputs:
     parallel-lint-excludes:
        description: 'Additional folders for parallel-lint to exclude, separated by newline'
        type: string
        required: false
        default: ''

# Cancels all previous workflow runs for the same branch that have not yet completed.
concurrency:
  # The concurrency group contains the workflow name and the branch name.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  actionlint: #-----------------------------------------------------------------------
    name: Lint GitHub Actions workflows
    runs-on: ubuntu-latest
    steps:
      - name: Check out source code
        uses: actions/checkout@v5

      - name: Add problem matcher
        run: |
          curl -s -o .github/actionlint-matcher.json https://raw.githubusercontent.com/rhysd/actionlint/main/.github/actionlint-matcher.json
          echo "::add-matcher::.github/actionlint-matcher.json"

      - name: Check workflow files
        uses: docker://rhysd/actionlint:latest
        with:
          args: -color -shellcheck=

  lint: #-----------------------------------------------------------------------
    name: Lint PHP files
    runs-on: ubuntu-latest
    steps:
      - name: Check out source code
        uses: actions/checkout@v5

      - name: Check existence of composer.json file
        id: check_composer_file
        uses: andstor/file-existence-action@v3
        with:
          files: "composer.json"

      - name: Set up PHP environment
        if: steps.check_composer_file.outputs.files_exists == 'true'
        uses: shivammathur/setup-php@v2
        with:
          php-version: 'latest'
          ini-values: zend.assertions=1, error_reporting=-1, display_errors=On
          tools: cs2pr
        env:
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Composer dependencies & cache dependencies
        if: steps.check_composer_file.outputs.files_exists == 'true'
        uses: "ramsey/composer-install@v3"
        env:
          COMPOSER_ROOT_VERSION: dev-${{ github.event.repository.default_branch }}
        with:
          # Bust the cache at least once a month - output format: YYYY-MM.
          custom-cache-suffix: $(date -u "+%Y-%m")

      - name: Check existence of vendor/bin/parallel-lint file
        id: check_linter_file
        uses: andstor/file-existence-action@v3
        with:
          files: "vendor/bin/parallel-lint"

      - name: Run Linter
        if: steps.check_linter_file.outputs.files_exists == 'true'
        run: |
          EXCLUDES=("--exclude vendor" "--exclude .git")

          ADDITIONAL_EXCLUDES=${ADDITIONAL_EXCLUDES%$'\n'}
          IFS=$'\n';
          ADDITIONAL_EXCLUDES=($ADDITIONAL_EXCLUDES)

          for i in "${ADDITIONAL_EXCLUDES[@]}"; do
            if [ ! -z "$i" ]; then
              EXCLUDES+=("--exclude $i")
            fi
          done

          unset IFS;

          echo "Providing excludes: ${EXCLUDES[*]}"

          vendor/bin/parallel-lint -j 10 . --show-deprecated ${EXCLUDES[@]} --checkstyle | cs2pr
        env:
          ADDITIONAL_EXCLUDES: ${{ inputs.parallel-lint-excludes }}

  lint-gherkin: #----------------------------------------------------------------
    name: Lint Gherkin Feature files
    runs-on: ubuntu-latest
    steps:
      - name: Check out source code
        uses: actions/checkout@v5

      - name: Setup node
        uses: actions/setup-node@v4

      - name: Download lint rules
        run: curl https://raw.githubusercontent.com/wp-cli/.github/refs/heads/main/.gherkin-lintrc -o $RUNNER_TEMP/.gherkin-lintrc

      - name: Run linter
        run: npx --yes gherkin-lint -c $RUNNER_TEMP/.gherkin-lintrc

  lint-spellcheck: #----------------------------------------------------------------
    name: Spell check
    runs-on: ubuntu-latest
    steps:
      - name: Check out source code
        uses: actions/checkout@v5

      - name: Check existence of config file
        id: check_files
        uses: andstor/file-existence-action@v3
        with:
          files: ".typos.toml"

      - name: Check spelling
        if: steps.check_files.outputs.files_exists == 'true'
        uses: crate-ci/typos@v1.35.3

  phpcs: #----------------------------------------------------------------------
    name: PHPCS
    runs-on: ubuntu-latest

    steps:
      - name: Check out source code
        uses: actions/checkout@v5

      - name: Check existence of composer.json & phpcs.xml.dist files
        id: check_files
        uses: andstor/file-existence-action@v3
        with:
          files: "composer.json, phpcs.xml.dist"

      - name: Set up PHP environment
        if: steps.check_files.outputs.files_exists == 'true'
        uses: shivammathur/setup-php@v2
        with:
          php-version: 'latest'
          tools: cs2pr
        env:
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Composer dependencies & cache dependencies
        if: steps.check_files.outputs.files_exists == 'true'
        uses: "ramsey/composer-install@v3"
        env:
          COMPOSER_ROOT_VERSION: dev-${{ github.event.repository.default_branch }}
        with:
          # Bust the cache at least once a month - output format: YYYY-MM.
          custom-cache-suffix: $(date -u "+%Y-%m")

      - name: Check existence of vendor/bin/phpcs file
        id: check_phpcs_binary_file
        uses: andstor/file-existence-action@v3
        with:
          files: "vendor/bin/phpcs"

      - name: Run PHPCS
        if: steps.check_phpcs_binary_file.outputs.files_exists == 'true'
        run: vendor/bin/phpcs -q --report=full --report-checkstyle=/tmp/phpcs-checkstyle-report.xml

      - name: Convert PHPCS report to PR comments
        if: always()
        run: |
          if [ -f /tmp/phpcs-checkstyle-report.xml ]; then
            cs2pr /tmp/phpcs-checkstyle-report.xml
          fi

  phpstan: #----------------------------------------------------------------------
    name: PHPStan
    runs-on: ubuntu-latest

    steps:
      - name: Check out source code
        uses: actions/checkout@v5

      - name: Check existence of composer.json & phpcs.xml.dist files
        id: check_files
        uses: andstor/file-existence-action@v3
        with:
          files: "composer.json"

      - name: Set up PHP environment
        if: steps.check_files.outputs.files_exists == 'true'
        uses: shivammathur/setup-php@v2
        with:
          php-version: 'latest'
          tools: cs2pr
        env:
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Composer dependencies & cache dependencies
        if: steps.check_files.outputs.files_exists == 'true'
        uses: "ramsey/composer-install@v3"
        env:
          COMPOSER_ROOT_VERSION: dev-${{ github.event.repository.default_branch }}
        with:
          # Bust the cache at least once a month - output format: YYYY-MM.
          custom-cache-suffix: $(date -u "+%Y-%m")

      - name: Check existence of vendor/bin/phpstan file
        id: check_phpstan_binary_file
        uses: andstor/file-existence-action@v3
        with:
          files: "vendor/bin/phpstan"

      - name: Run PHPStan
        if: steps.check_phpstan_binary_file.outputs.files_exists == 'true'
        run: composer phpstan
